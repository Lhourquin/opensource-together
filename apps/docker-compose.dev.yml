services:
  # Base de données principale
  business-db:
    image: postgres:16
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${BUSINESS_DB_USER}
      - POSTGRES_PASSWORD=${BUSINESS_DB_PASSWORD}
      - POSTGRES_DB=${BUSINESS_DB_NAME}
    ports:
      - "${BUSINESS_DB_PORT}:5432"
    volumes:
      - business_db_data:/var/lib/postgresql/data
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${BUSINESS_DB_USER} -d ${BUSINESS_DB_NAME}",
        ]
      interval: 5s
      timeout: 5s
      retries: 5

  # Base de données Supertokens
  supertokens-db:
    image: postgres:16
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${SUPERTOKEN_DB_USER}
      - POSTGRES_PASSWORD=${SUPERTOKEN_DB_PASSWORD}
      - POSTGRES_DB=${SUPERTOKEN_DB_NAME}
    ports:
      - "${SUPERTOKEN_DB_PORT}:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${SUPERTOKEN_DB_USER} -d ${SUPERTOKEN_DB_NAME}",
        ]
      interval: 5s
      timeout: 5s
      retries: 5

  # Service d'authentification
  supertokens:
    image: registry.supertokens.io/supertokens/supertokens-postgresql:10.1.0
    env_file:
      - .env
    environment:
      - POSTGRESQL_CONNECTION_URI=postgresql://${SUPERTOKEN_DB_USER}:${SUPERTOKEN_DB_PASSWORD}@supertokens-db:5432/${SUPERTOKEN_DB_NAME}
    ports:
      - "3567:3567"
    networks:
      - app_network
    restart: unless-stopped
    depends_on:
      supertokens-db:
        condition: service_healthy
    healthcheck:
      test: >
        bash -c 'exec 3<>/dev/tcp/127.0.0.1/3567 && echo -e "GET /hello HTTP/1.1\r\nhost: 127.0.0.1:3567\r\nConnection: close\r\n\r\n" >&3 && cat <&3 | grep "Hello"'
      interval: 10s
      timeout: 5s
      retries: 5

  # Service de migration
  migrate:
    build:
      context: ./server
      dockerfile: Dockerfile.dev
    command: >
      sh -c '
        echo "Waiting for business-db to be ready..."
        while ! pg_isready -h business-db -p 5432 -U ${BUSINESS_DB_USER}; do
          sleep 2
        done
        echo "Database is ready."
        echo "Generating Prisma Client..."
        # Check if the schema file exists before trying to generate
        echo "Checking for schema at: /app/src/infrastructures/orm/prisma/schema.prisma"
        ls -l /app/src/infrastructures/orm/prisma/schema.prisma
        # Generate the client based on the schema
        npx prisma generate --schema=/app/src/infrastructures/orm/prisma/schema.prisma
        echo "Running development migrations..."
        # Apply migrations using 'migrate dev', suitable for development.
        # It handles creation, application, and prompts for reset if needed.
        # --skip-generate avoids running generate twice.
        npx prisma migrate dev --schema=/app/src/infrastructures/orm/prisma/schema.prisma --skip-generate
        echo "Migrations completed."
      '
    environment:
      - DATABASE_URL=postgresql://${BUSINESS_DB_USER}:${BUSINESS_DB_PASSWORD}@business-db:5432/${BUSINESS_DB_NAME}?schema=public
    volumes:
      # Mount the entire prisma directory for schema and migrations
      - ./server/src/infrastructures/orm/prisma:/app/src/infrastructures/orm/prisma
    depends_on:
      business-db:
        condition: service_healthy
    networks:
      - app_network

  # Backend API
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile.dev
    environment:
      - WEBSITE_DOMAIN=${WEBSITE_DOMAIN}
      - API_DOMAIN=${API_DOMAIN}
      - COOKIE_DOMAIN=${COOKIE_DOMAIN}
      - CONNECTION_URI=${SUPERTOKEN_URI}
      - DATABASE_URL=${DATABASE_URL}
      - APP_NAME=${APP_NAME}
      - NODE_ENV=${NODE_ENV}
      - SUPERTOKENS_API_KEY=${SUPERTOKENS_API_KEY}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
    ports:
      - "${API_PORT}:3000"
      - "5555:5555" # Ajoute cette ligne si absente
    volumes:
      - ./server/src:/app/src
    networks:
      - app_network
    depends_on:
      business-db:
        condition: service_healthy
      supertokens:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000/",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  business_db_data:
  db_data:

networks:
  app_network:
    driver: bridge
