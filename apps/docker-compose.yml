services:

  frontend:
    build:
      context: ./web
      dockerfile: Dockerfile
    ports:
      - "${FRONT_PORT}:3000"
    networks:
      - app_network
    depends_on:
      - backend

  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    environment:
      - WEBSITE_DOMAIN=http://${APP_DOMAIN}:{FRONT_PORT}
      - API_DOMAIN=http://${APP_DOMAIN}:${API_PORT}
      - COOKIE_DOMAIN=${APP_DOMAIN}
      - CONNECTION_URI=${SUPERTOKEN_URI}
      - DATABASE_URL=postgresql://${BUSINESS_DB_USER}:${BUSINESS_DB_PASSWORD}@business-db:5432/${BUSINESS_DB_NAME}?schema=public
    ports:
      - "${API_PORT}:3000"
    networks:
      - app_network
    depends_on:
      business-db:
        condition: service_healthy
      supertokens:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    restart: unless-stopped

  business-db:
    image: postgres:16
    environment:
      - POSTGRES_USER=${BUSINESS_DB_USER}
      - POSTGRES_PASSWORD=${BUSINESS_DB_PASSWORD}
      - POSTGRES_DB=${BUSINESS_DB_NAME}
    ports:
      - "${BUSINESS_DB_PORT}:5432"
    volumes:
      - business_db_data:/var/lib/postgresql/data
    #  - ./server/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: pg_isready -U ${BUSINESS_DB_USER} -d ${BUSINESS_DB_NAME}
      interval: 5s
      timeout: 5s
      retries: 5

  supertokens:
    image: registry.supertokens.io/supertokens/supertokens-postgresql:10.1.0
    environment:
      - POSTGRESQL_CONNECTION_URI=postgresql://${SUPERTOKEN_DB_USER}:${SUPERTOKEN_DB_PASSWORD}@supertokens-db:5432/${SUPERTOKEN_DB_NAME}
    ports:
      - "3567:3567"
    networks:
      - app_network
    restart: unless-stopped
    depends_on:
      supertokens-db:
        condition: service_healthy
    healthcheck:
      test: >
        bash -c 'exec 3<>/dev/tcp/127.0.0.1/3567 && echo -e "GET /hello HTTP/1.1\r\nhost: 127.0.0.1:3567\r\nConnection: close\r\n\r\n" >&3 && cat <&3 | grep "Hello"'
      interval: 10s
      timeout: 5s
      retries: 5

  supertokens-db:
    image: postgres:16
    environment:
      - POSTGRES_USER=${SUPERTOKEN_DB_USER}
      - POSTGRES_PASSWORD=${SUPERTOKEN_DB_PASSWORD}
      - POSTGRES_DB=${SUPERTOKEN_DB_NAME}
    ports:
      - "${SUPERTOKEN_DB_PORT}:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: pg_isready -U ${SUPERTOKEN_DB_USER} -d ${SUPERTOKEN_DB_NAME}
      interval: 5s
      timeout: 5s
      retries: 5

  migrate:
    build:
      context: ./server
      dockerfile: Dockerfile
    command: ["npx", "prisma", "db", "push", "--schema=/app/schema/schema.prisma", "--skip-generate"]
    environment:
      - DATABASE_URL=postgresql://${BUSINESS_DB_USER}:${BUSINESS_DB_PASSWORD}@business-db:5432/${BUSINESS_DB_NAME}?schema=public
    depends_on:
      - business-db
    networks:
      - app_network

volumes:
  business_db_data:
  db_data:

networks:
  app_network:
    driver: bridge
